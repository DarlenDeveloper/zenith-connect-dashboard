-- Table to store user notifications
CREATE TABLE public.notifications (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  user_id UUID NOT NULL REFERENCES auth.users(id) ON DELETE CASCADE, -- The user who should receive the notification
  type TEXT NOT NULL, -- e.g., 'tech_issue_flagged', 'tech_issue_reminder', 'announcement', 'subscription_ending'
  title TEXT NOT NULL, -- Short title for the notification
  message TEXT, -- Optional longer message body
  is_read BOOLEAN DEFAULT false NOT NULL,
  target_table TEXT, -- Optional: The table related to the notification (e.g., 'technical_issues')
  target_id UUID, -- Optional: The ID of the record in the target_table
  created_at TIMESTAMPTZ DEFAULT timezone('utc'::text, now()) NOT NULL
);

-- Indexes
CREATE INDEX idx_notifications_user_id_is_read ON public.notifications(user_id, is_read);
CREATE INDEX idx_notifications_created_at ON public.notifications(created_at DESC);

-- RLS Policies
ALTER TABLE public.notifications ENABLE ROW LEVEL SECURITY;

-- Users can view their own notifications
CREATE POLICY "Users can view their own notifications" 
ON public.notifications
FOR SELECT 
USING (auth.uid() = user_id);

-- Users can update their own notifications (specifically to mark as read)
CREATE POLICY "Users can update their own notifications" 
ON public.notifications
FOR UPDATE
USING (auth.uid() = user_id);

-- Users can insert their own notifications
CREATE POLICY "Users can insert their own notifications" 
ON public.notifications
FOR INSERT
WITH CHECK (auth.uid() = user_id);

-- Allow backend functions/triggers to insert notifications
-- (Service role key bypasses RLS by default, so explicit policy often not needed for inserts from backend)

COMMENT ON TABLE public.notifications IS 'Stores notifications for users.';
COMMENT ON COLUMN public.notifications.type IS 'Category of the notification for potential filtering or icon display.';
COMMENT ON COLUMN public.notifications.target_id IS 'Reference to the specific record related to the notification.'; 