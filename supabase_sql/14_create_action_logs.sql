-- 14_create_action_logs.sql
-- Table to log user actions associated with agents

CREATE TABLE action_logs (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    user_id UUID REFERENCES auth.users(id) ON DELETE CASCADE NOT NULL,
    acting_agent_id UUID REFERENCES agents(id) ON DELETE SET NULL, -- Changed from BIGINT to UUID
    action_type TEXT NOT NULL, -- e.g., 'FLAG_TECHNICAL_ISSUE', 'UPDATE_CALL_STATUS', 'SAVE_CALL_NOTES', 'SUBMIT_AI_VOICE_REQUEST'
    target_table TEXT, -- e.g., 'technical_issues', 'calls', 'ai_voice_requests'
    target_id UUID, -- Changed from BIGINT to UUID to potentially reference UUID primary keys in target tables
    details JSONB, -- Optional: Store extra context about the action
    created_at TIMESTAMPTZ DEFAULT timezone('utc'::text, now()) NOT NULL
);

-- Optional: Indexes for efficient querying
CREATE INDEX idx_action_logs_user_id ON action_logs(user_id);
CREATE INDEX idx_action_logs_acting_agent_id ON action_logs(acting_agent_id);
CREATE INDEX idx_action_logs_action_type ON action_logs(action_type);
CREATE INDEX idx_action_logs_target ON action_logs(target_table, target_id); -- Combined index
CREATE INDEX idx_action_logs_created_at ON action_logs(created_at);

-- Enable RLS
ALTER TABLE action_logs ENABLE ROW LEVEL SECURITY;

-- Policies: Users can only see their own action logs
CREATE POLICY "Allow users to view their own action logs"
    ON action_logs
    FOR SELECT
    USING (auth.uid() = user_id);

-- Policies: Users can insert their own action logs
CREATE POLICY "Allow users to insert their own action logs"
    ON action_logs
    FOR INSERT
    WITH CHECK (auth.uid() = user_id);

-- Grant permissions to authenticated users
GRANT SELECT, INSERT ON action_logs TO authenticated;

-- Grant usage on the sequence for id generation (still needed for the primary key)
GRANT USAGE, SELECT ON SEQUENCE action_logs_id_seq TO authenticated; 